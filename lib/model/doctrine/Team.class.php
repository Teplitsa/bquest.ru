<?php

/**
 * Team
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    bquest
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Team extends BaseTeam
{

  const MAX_ASSIGNED_QUESTS = 5;


  public function getCode()
  {
    return sha1( base64_encode( $this->getId() ) );
  }

  /**
   * @return Quest[]|Doctrine_Collection
   */
  public function getAssignedQuests()
  {
    return $this->getAssignedQuestsQuery()->execute();
  }

  public function getAssignedQuestsQuery()
  {
    return myDoctrineQuery::create()
      ->from( 'Quest q' )
      ->where( 'q.team_id = ?', $this->id )
      ->andWhere( 'q.status = ?', Quest::STATUS_ASSIGNED )
      ;
  }


  /**
   * @return Quest[]|Doctrine_Collection
   */
  public function getReadyQuests()
  {
    return $this->getReadyQuestsQuery()->execute();
  }

  public function getReadyQuestsQuery()
  {
    return myDoctrineQuery::create()
      ->from( 'Quest q' )
      ->where( 'q.team_id = ?', $this->id )
      ->andWhereIn( 'q.status', array( Quest::STATUS_READY, Quest::STATUS_CLOSED ) )
    ;
  }

  /**
   * @return int
   */
  public function getHours()
  {
    $query = $this->getReadyQuestsQuery();
    $query->groupBy( 'q.team_id' );
    $query->select( 'SUM( q.hours ) AS hours' );

    return $query->fetchOne( array(), Doctrine::HYDRATE_SINGLE_SCALAR );
  }

  /**
   * @return int
   */
  public function getRating()
  {
    $query = $this->getReadyQuestsQuery();
    $query->groupBy( 'q.team_id' );
    $query->select( 'SUM( q.rating ) AS rating' );

    $rating =  $query->fetchOne( array(), Doctrine::HYDRATE_SINGLE_SCALAR );

    return $rating ? $rating : '...';
  }

  /**
   * @param $limit
   * @return Doctrine_Collection|Team[]
   */
  public static function getBest( $limit = 10 )
  {
    return myDoctrineQuery::create()
      ->from( 'Team t' )
      ->leftJoin( 't.Quests q' )
      ->groupBy( 'q.team_id' )
      ->orderBy( 'SUM( q.rating ) DESC' )
      ->limit( $limit )
      ->execute()
      ;
  }

}
